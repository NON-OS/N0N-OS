#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const process_1 = require("./process");
const args = (0, util_1.parseArgs)({
    options: {
        socksPort: {
            type: 'string',
            short: 's',
        },
        orPort: {
            type: 'string',
            short: 'o',
        },
        controlPort: {
            type: 'string',
            short: 'c',
        },
        verbose: {
            type: 'boolean',
            short: 'v',
        },
        config: {
            type: 'string',
            short: 'f',
        },
        binaryPath: {
            type: 'string',
            short: 'b',
        },
        agree: {
            type: 'boolean',
        },
        termsFilePath: {
            type: 'string',
            short: 't',
        },
    }
});
const config = {
    displayLog: args.values.verbose === true,
    socksPort: 9050,
    orPort: 9001,
    controlPort: 9051,
    binaryPath: args.values.binaryPath,
    autoTermsAgreement: args.values.agree === true,
    termsFilePath: args.values.termsFilePath,
};
function parsePort(value) {
    if (value === undefined)
        return undefined;
    const parsed = parseInt(value, 10);
    return isFinite(parsed) ? parsed : undefined;
}
const socksPort = parsePort(args.values.socksPort);
if (socksPort !== undefined)
    config.socksPort = socksPort;
const orPort = parsePort(args.values.orPort);
if (orPort !== undefined)
    config.orPort = orPort;
const controlPort = parsePort(args.values.controlPort);
if (controlPort !== undefined)
    config.controlPort = controlPort;
const configFile = args.values.config;
if (configFile !== undefined)
    config.configFile = configFile;
const termsFilePath = args.values.termsFilePath;
if (termsFilePath !== undefined)
    config.termsFilePath = termsFilePath;
const anon = new process_1.Process(config);
(() => __awaiter(void 0, void 0, void 0, function* () {
    yield anon.start();
}))();
function gracefulShutdown() {
    anon.stop();
}
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
