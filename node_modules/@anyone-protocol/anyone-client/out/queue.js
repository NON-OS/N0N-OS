"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncEvent = exports.AsyncQueue = void 0;
class AsyncQueue {
    constructor() {
        this.queue = [];
        this.resolvers = [];
    }
    push(item) {
        if (this.resolvers.length > 0) {
            const resolve = this.resolvers.shift();
            resolve(item);
        }
        else {
            this.queue.push(item);
        }
    }
    pop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.queue.length > 0) {
                return this.queue.shift();
            }
            return new Promise(resolve => this.resolvers.push(resolve));
        });
    }
    isEmpty() {
        return this.queue.length === 0;
    }
    clear() {
        this.queue = [];
        this.resolvers = [];
    }
}
exports.AsyncQueue = AsyncQueue;
class AsyncEvent {
    constructor() {
        this.flag = false;
        this.resolvers = [];
    }
    set() {
        this.flag = true;
        for (const resolve of this.resolvers)
            resolve();
        this.resolvers = [];
    }
    clear() {
        this.flag = false;
    }
    wait() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.flag)
                return;
            return new Promise(resolve => this.resolvers.push(resolve));
        });
    }
}
exports.AsyncEvent = AsyncEvent;
