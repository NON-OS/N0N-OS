"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectPath = void 0;
const models_1 = require("../models");
const control_1 = require("../control");
const process_1 = require("../process");
/**
 * Selects a path through the Tor network with specified characteristics
 * @param control - The Tor control connection
 * @param hopCount - The desired number of hops in the path
 * @param exitCountries - Optional country codes where the exit node should be located
 * @returns A promise that resolves to an array of relay fingerprints representing the selected path
 */
function selectPath(control, hopCount, ...exitCountries) {
    return __awaiter(this, void 0, void 0, function* () {
        const relays = yield control.getRelays();
        const state = {
            desiredLength: hopCount,
            desiredExitCountries: exitCountries,
            excludedRelays: [],
            excludedCountries: [],
            relays: relays,
            path: [],
        };
        yield pickExit(control, state);
        yield populatePath(control, state);
        return state.path;
    });
}
exports.selectPath = selectPath;
function populatePath(control, state) {
    return __awaiter(this, void 0, void 0, function* () {
        let r = 0;
        while (r == 0) {
            r = yield extendPath(control, state);
        }
    });
}
function extendPath(control, state) {
    return __awaiter(this, void 0, void 0, function* () {
        if (state.path.length >= state.desiredLength) {
            return 1;
        }
        let relay = null;
        if (state.path.length === 0) {
            relay = yield chooseEntry(control, state);
        }
        else if (state.path.length === state.desiredLength - 1) {
            relay = yield chooseExit(control, state);
        }
        else {
            relay = yield chooseMiddle(control, state);
        }
        state.path.push(relay.fingerprint);
        state.excludedRelays.push(relay.fingerprint);
        state.excludedCountries.push(relay.country);
        return 0;
    });
}
function chooseMiddle(control, state) {
    return __awaiter(this, void 0, void 0, function* () {
        let middleRelays = state.relays.filter(relay => relay.flags.includes(models_1.Flag.Stable) &&
            relay.flags.includes(models_1.Flag.Running) &&
            !relay.flags.includes(models_1.Flag.Exit) && // not Exit allowed for middle
            !relay.flags.includes(models_1.Flag.Guard) // not Guard allowed for middle
        );
        yield control.populateCountries(middleRelays);
        middleRelays = middleRelays.filter(relay => !state.excludedRelays.includes(relay.fingerprint) &&
            !state.excludedCountries.includes(relay.country));
        return chooseRandom(middleRelays);
    });
}
function chooseExit(control, state) {
    return __awaiter(this, void 0, void 0, function* () {
        if (state.exit) {
            return state.exit;
        }
        let exits = state.relays.filter(relay => relay.flags.includes(models_1.Flag.Exit) && !relay.flags.includes(models_1.Flag.BadExit));
        yield control.populateCountries(exits);
        exits = exits.filter(relay => !state.excludedRelays.includes(relay.fingerprint) &&
            !state.excludedCountries.includes(relay.country));
        if (state.desiredExitCountries.length > 0) {
            exits = exits.filter(relay => state.desiredExitCountries.includes(relay.country));
        }
        return chooseRandom(exits);
    });
}
function chooseEntry(control, state) {
    return __awaiter(this, void 0, void 0, function* () {
        let entries = state.relays.filter(relay => relay.flags.includes(models_1.Flag.Guard) &&
            relay.flags.includes(models_1.Flag.Stable) &&
            relay.flags.includes(models_1.Flag.Running) &&
            relay.flags.includes(models_1.Flag.Fast) &&
            !relay.flags.includes(models_1.Flag.Exit) // not Exit allowed for entry
        );
        yield control.populateCountries(entries);
        if (state.desiredExitCountries.length > 0) {
            entries = entries.filter(relay => relay.country && !state.desiredExitCountries.includes(relay.country));
        }
        entries = entries.filter(relay => !state.excludedRelays.includes(relay.fingerprint) &&
            !state.excludedCountries.includes(relay.country));
        return chooseRandom(entries);
    });
}
function pickExit(control, state) {
    return __awaiter(this, void 0, void 0, function* () {
        state.exit = yield chooseExit(control, state);
        state.excludedRelays.push(state.exit.fingerprint);
        state.excludedCountries.push(state.exit.country);
    });
}
function chooseRandom(relays) {
    const totalBandwidth = relays.reduce((sum, relay) => sum + relay.bandwidth, 0);
    const weights = relays.map(relay => relay.bandwidth / totalBandwidth);
    const randomValue = Math.random();
    let cumulative = 0;
    for (let i = 0; i < relays.length; i++) {
        cumulative += weights[i];
        if (randomValue < cumulative) {
            return relays[i];
        }
    }
    return relays[relays.length - 1]; // Fallback
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Starting Anon...');
        // Create Anon instance
        const anon = new process_1.Process({
            displayLog: true,
            socksPort: 9050,
            controlPort: 9051
        });
        try {
            // Start Anon
            yield anon.start();
            console.log('Anon started');
            // Connect to Control
            const control = new control_1.Control();
            // Authenticate
            yield control.authenticate();
            console.log('Authenticated to Anon Control Port');
            // Test path selection with different configurations
            console.log('\nTesting path selection with 3 hops and no specific exit country:');
            const path1 = yield selectPath(control, 3);
            console.log('Selected path:', path1);
            console.log('\nTesting path selection with 4 hops and exit in Germany:');
            const path2 = yield selectPath(control, 4, 'de');
            console.log('Selected path:', path2);
            console.log('\nTesting path selection with 5 hops and exit in US or UK:');
            const path3 = yield selectPath(control, 5, 'us', 'gb');
            console.log('Selected path:', path3);
            // Close connection
            control.end();
        }
        catch (error) {
            console.error('Error:', error);
        }
        finally {
            // Stop Anon
            yield anon.stop();
            console.log('Anon stopped');
        }
    });
}
// Run the main function
main().catch(console.error);
