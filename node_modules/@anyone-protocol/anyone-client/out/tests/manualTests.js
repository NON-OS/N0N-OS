"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = require("../process");
const socks_1 = require("../socks");
const control_1 = require("../control");
const models_1 = require("../models");
const config = {
    routings: [
        { targetAddress: 'ip-api.com', exitCountries: ['de'] },
        { targetAddress: 'ipinfo.io', exitCountries: ['nl'] },
        { targetAddress: 'api.ipify.org', exitCountries: ['us'] },
    ]
};
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const anon = new process_1.Process({ displayLog: true, socksPort: 9050, controlPort: 9051 });
        try {
            yield anon.start();
            const control = new control_1.Control();
            console.log('Anon started');
            console.log('Starting Anon SDK process...');
            yield control.authenticate();
            const relays = yield control.getRelays();
            console.log('Relays:', relays.length);
            const routingMap = {};
            for (const route of config.routings) {
                const exits = control.filterRelaysByFlags(relays, models_1.Flag.Exit);
                console.log('Exits:', exits.length);
                const guards = control.filterRelaysByFlags(relays, models_1.Flag.Guard);
                console.log('Guards:', guards.length);
                const exit = exits[Math.floor(Math.random() * exits.length)];
                const guard = guards[Math.floor(Math.random() * guards.length)];
                const path = [guard.fingerprint, exit.fingerprint];
                console.log('Path:', path);
                const options = {
                    circuitId: 0,
                    serverSpecs: path,
                    purpose: "general",
                    awaitBuild: true
                };
                const circuitId = yield control.extendCircuit(options);
                const circ = yield control.getCircuit(circuitId);
                console.log('Circuit:', circ);
                routingMap[route.targetAddress] = circuitId;
            }
            yield control.disableStreamAttachment();
            // add event listener
            const eventListener = (event) => __awaiter(this, void 0, void 0, function* () {
                console.log('Event:', event);
                if (event.status === 'NEW') {
                    const targetAddress = event.target.split(':')[0];
                    const circuitId = routingMap[targetAddress];
                    if (circuitId && (event.circId === '0' || event.circId === undefined)) {
                        console.log('Attaching stream:', event.streamId, circuitId);
                        yield control.attachStream(event.streamId, circuitId);
                    }
                }
            });
            yield control.addEventListener(eventListener, models_1.EventType.STREAM);
            // Make a request through the established circuits
            const socks = new socks_1.Socks(anon);
            const response = yield socks.get('https://api.ipify.org?format=json');
            console.log('Response:', response.data);
        }
        catch (error) {
            console.error('Error:', error);
        }
        finally {
            yield anon.stop();
            console.log('Anon stopped');
        }
    });
}
main();
