"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const control_1 = require("../control");
const process_1 = require("../process");
const path_selection_1 = require("./path-selection");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Starting Anon...');
        // Create Anon instance
        const anon = new process_1.Process({
            displayLog: true,
            socksPort: 9050,
            controlPort: 9051
        });
        try {
            // Start Anon
            yield anon.start();
            console.log('Anon started');
            // Connect to Control
            const control = new control_1.Control();
            // Authenticate
            yield control.authenticate();
            console.log('Authenticated to Anon Control Port');
            // Test path selection with different configurations
            console.log('\nTesting path selection with 3 hops and no specific exit country:');
            const path1 = yield (0, path_selection_1.selectPath)(control, 3);
            console.log('Selected path:', path1);
            console.log('\nTesting path selection with 4 hops and exit in Germany:');
            const path2 = yield (0, path_selection_1.selectPath)(control, 4, 'de');
            console.log('Selected path:', path2);
            console.log('\nTesting path selection with 5 hops and exit in US or UK:');
            const path3 = yield (0, path_selection_1.selectPath)(control, 5, 'us', 'gb');
            console.log('Selected path:', path3);
            // Close connection
            control.end();
        }
        catch (error) {
            console.error('Error:', error);
        }
        finally {
            // Stop Anon
            yield anon.stop();
            console.log('Anon stopped');
        }
    });
}
// Run the main function
main().catch(console.error);
