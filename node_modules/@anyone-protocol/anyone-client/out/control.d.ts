import { EventType } from './models';
import { CircuitStatus, RelayInfo, ExtendCircuitOptions, Flag } from './models';
export declare class Control {
    private client;
    private isAuthenticated;
    private eventListeners;
    private msgLock;
    private replyQueue;
    private eventQueue;
    private eventNotice;
    private readerLoopTask;
    private eventLoopTask;
    constructor(host?: string, port?: number);
    authenticate(password?: string): Promise<void>;
    setEvents(events: EventType[]): Promise<boolean>;
    circuitStatus(): Promise<CircuitStatus[]>;
    getCircuit(circuitId: number): Promise<CircuitStatus>;
    msg(message: string): Promise<string>;
    resolve(hostname: string): Promise<void>;
    extendCircuit(options?: ExtendCircuitOptions): Promise<number>;
    closeCircuit(circuitId: number): Promise<void>;
    getRelayInfo(fingerprint: string): Promise<RelayInfo>;
    end(): void;
    disableStreamAttachment(): Promise<void>;
    enableStreamAttachment(): Promise<void>;
    disablePredictedCircuits(): Promise<void>;
    enablePredictedCircuits(): Promise<void>;
    setConf(param: string, value: string | string[]): Promise<void>;
    resetConf(...params: string[]): Promise<void>;
    private setOptions;
    attachStream(streamId: number, circuitId: number, exitingHop?: number): Promise<void>;
    private attachListeners;
    private attachEventListenersOrFail;
    addEventListener(callback: Function, ...eventTypes: EventType[]): Promise<void>;
    removeEventListener(callback: Function): Promise<void>;
    private recv;
    private createLoopTasks;
    private readerLoop;
    private convertToEvent;
    private handleEvent;
    private eventLoop;
    getRelays(): Promise<RelayInfo[]>;
    findFirstByCountry(relays: RelayInfo[], firstCount: number, ...countries: string[]): Promise<RelayInfo[]>;
    getRelaysByCountries(...countries: string[]): Promise<RelayInfo[]>;
    populateCountries(relays: RelayInfo[]): Promise<void>;
    filterRelaysByCountries(relays: RelayInfo[], ...countries: string[]): Promise<RelayInfo[]>;
    filterRelaysByFlags(relays: RelayInfo[], ...flags: Flag[]): RelayInfo[];
    getCountry(address: string, timeoutMs?: number): Promise<string>;
    private base64ToHex;
    private isValidFingerprint;
}
